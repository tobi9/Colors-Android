local TouchFb = require("modules.animation")

local box_nodes = {}
local text_nodes = {}
local color_price = 5 -- the number of coins needed to unlock a new color

local update_coin_balance = function()
	local node = gui.get_node("coins")
	gui.set_text(node, "COINS\n"..coins)
end

function init(self)
	update_coin_balance()
	--[[display the color boxes
	local color_scale = vmath.vector3(0.8, 1.6, 1)
	local word_scale = vmath.vector3(0.8, 0.8, 1)]]
	local positions = {
		vmath.vector3(120, 800, 0),	vmath.vector3(320, 800, 0),	vmath.vector3(520, 800, 0),
		vmath.vector3(120, 600, 0),	vmath.vector3(320, 600, 0),	vmath.vector3(520, 600, 0),
		vmath.vector3(120, 400, 0),	vmath.vector3(320, 400, 0),	vmath.vector3(520, 400, 0),
		vmath.vector3(120, 200, 0),	vmath.vector3(320, 200, 0),	vmath.vector3(520, 200, 0)
	}	
	for k, v in ipairs(color_info_table) do
		local pos = positions[k]
		local size = vmath.vector3(200, 100, 0)
		local box_scale = vmath.vector3(0.65, 1.3, 0)
		local text_scale = vmath.vector3(0.25, 0.25, 1)
		local box_node = gui.new_box_node(pos, size)
		local text_node = gui.new_text_node(pos, string.upper(v[1]))
		gui.set_color(box_node, v[3])
		gui.set_scale(box_node, box_scale)
		gui.set_scale(text_node, text_scale)
		table.insert(box_nodes, box_node)
		table.insert(text_nodes, text_node)
		if v[2] == false then
			gui.set_text(text_node, "LOCKED")
		end
	end
	local Customizer = require("modules.customizer")
	-- node each node to its appropriate color
	local col_name = "color_options" -- this is needed by the customizer to avoid conflicts in memory
	local box_nodes = {"title", "coins", "_menu"}
	for k, v in ipairs(box_nodes) do
		Customizer.set_node_color(v, col_name)
	end
	msg.post(".", "acquire_input_focus")
end

function final(self)
	msg.post(".", "release_input_focus")
end

--touch id
local touch = hash('touch')
local back = hash('back')
function on_input(self, action_id, action)
	if action_id == touch and action.released then
		local menu = gui.get_node("_menu")
		if gui.pick_node(menu, action.x, action.y) then
			TouchFb.touch_feedback(menu)
			msg.post(main, "unload_color_options")
		else
			for k, v in ipairs(box_nodes) do
				if gui.pick_node(v, action.x, action.y) then
					TouchFb.touch_feedback(v)
					if coins >= color_price then
						if color_info_table[k][2] == false then
							msg.post("#success_sound", "play_sound", {delay = 0, gain = 1})
							coins = coins - color_price
							update_coin_balance()
							table.remove(color_info_table[k], 2)
							table.insert(color_info_table[k], 2, true)
							table.insert(unlocked_colors_table, color_info_table[k])
							gui.set_text(text_nodes[k], string.upper(color_info_table[k][1]))
						end
					end
					return
				end
			end
		end
	elseif action_id == back and action.released then
		msg.post(main, "click")
		msg.post(main, "unload_color_options")
	end
end