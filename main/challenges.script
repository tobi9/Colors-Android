local word_streaks
local color_streaks
local max_word_streak
local max_color_streak
local word_streak_scores
local color_streak_scores
local brake_used -- this boolean variable is used for challenge no 6 and 8 after so loops its value is set

local check_memory_loc = function(str)
	local file = sys.get_save_file(folder, str)
	local cell = sys.load(file)
	return cell[1]
end

local save_to_memory_loc = function(str, n)
	local file = sys.get_save_file(folder, str)
	local tab = {n}
	sys.save(file, tab)
end

local challenge
local challenge_ptr -- points to the challenge in the table
local challenge_num -- the score the player is supposed to get
local challenge_status -- passed or not
local challenge_change = false -- boolean value that evaluates if the player wants to change the challenge
local reward
local num_of_colors -- the number of colors picked by the player. it is will be used to calculate the final reward. final_reward = num_of_colors * reward
local final_reward
local ptr_holder -- this holds the challenge pointer when the challenge is to be changed at the player's choosing
local set_challenge = function()
	local challenges = {--[[1]]	"REACH A SCORE OF "..tostring(challenge_num),
	--[[2]]	"REACH A SCORE OF\n"..tostring(challenge_num).." WITHOUT USING BRAKES",

	--[[3]]	"GET A "..tostring(challenge_num).."X COLOR STREAK",
	--[[4]]	"GET A "..tostring(challenge_num).."X COLOR STREAK\nWITHOUT USING BRAKES",

	--[[5]]	"GET A "..tostring(challenge_num).."X WORD STREAK",
	--[[6]]	"GET A "..tostring(challenge_num).."X WORD STREAK\nWITHOUT USING BRAKES",

	--[[7]]	"BEAT YOUR HIGHSCORE",
	--[[8]] "BEAT YOUR HIGHSCORE\nWITHOUT USING BRAKES",

	--[[9]]	"DOUBLE YOUR HIGHSCORE",
	--[[10]]"DOUBLE YOUR HIGHSCORE\nWITHOUT USING BRAKES",

	--[[11]]"TRIPLE YOUR HIGHSCORE",
	--[[12]]"TRIPLE YOUR HIGHSCORE\nWITHOUT USING BRAKES"
	}
	if check_memory_loc("challenge_ptr") == nil then
		if not challenge_change then 
			challenge_ptr = math.random(#challenges)
			--if the highscore is less than  10, then the last four challenges should not be set
			if challenge_ptr >= 7 and highscore < 10 then
				repeat
					challenge_ptr = math.random(#challenges)
				until(challenge_ptr < 7)
			end
		else --if the challenge is to be changed
			if challenge_ptr ~= #challenges then
				repeat
					challenge_ptr = 12
				until(challenge_ptr ~= ptr_holder)
				--if the highscore is less than  10, then the last four challenges should not be set
				if challenge_ptr >= 7 and highscore < 10 then
					repeat
						challenge_ptr = math.random(#challenges)
					until(challenge_ptr < 7 and challenge ~= ptr_holder)
				end
			else
				challenge_ptr = math.random(1, ptr_holder - 1)
			end
		end
		challenge_status = false
		change_challenge = false
		--notify the analyser
		msg.post(analyzer, "new_chal")
	else
		challenge_ptr = check_memory_loc("challenge_ptr")
		challenge_status = check_memory_loc("challenge_status")
	end
	-- The block of code below checks the memory for the challenge number. If empty, it sets it to the default values.
	if check_memory_loc("challenge_num"..challenge_ptr) == nil then
		if challenge_ptr == 1 or challenge_ptr == 2 then
			challenge_num = 5
		else --what if the challenge has to do with highscore!!!!!!!!!!!!!!!!!!!
			challenge_num = 3
		end
	else
		challenge_num = check_memory_loc("challenge_num"..challenge_ptr)
	end
	-- the challenge num increases even if the player hasn't collected the reward yet so it needs to be re-adjusted
	if challenge_status then
		if challenge_ptr <= 2 then
			if challenge_num > 5 then
				challenge_num = challenge_num - 5
			end
		elseif challenge_ptr > 2 and challenge_num <= 6 then
			if challenge_num > 3 then
				challenge_num = challenge_num - 1
			end
		end
	end
	challenges = {--[[1]]	"REACH A SCORE OF "..tostring(challenge_num),
	--[[2]]	"REACH A SCORE OF\n"..tostring(challenge_num).." WITHOUT USING BRAKES",

	--[[3]]	"GET A "..tostring(challenge_num).."X COLOR STREAK",
	--[[4]]	"GET A "..tostring(challenge_num).."X COLOR STREAK\nWITHOUT USING BRAKES",

	--[[5]]	"GET A "..tostring(challenge_num).."X WORD STREAK",
	--[[6]]	"GET A "..tostring(challenge_num).."X WORD STREAK\nWITHOUT USING BRAKES",

	--[[7]]	"BEAT YOUR HIGHSCORE",
	--[[8]] "BEAT YOUR HIGHSCORE\nWITHOUT USING BRAKES",

	--[[9]]	"DOUBLE YOUR HIGHSCORE",
	--[[10]]"DOUBLE YOUR HIGHSCORE\nWITHOUT USING BRAKES",

	--[[11]]"TRIPLE YOUR HIGHSCORE",
	--[[12]]"TRIPLE YOUR HIGHSCORE\nWITHOUT USING BRAKES"
	}
	--Set the reward
	if challenge_status then
		reward = check_memory_loc("reward")
		final_reward = reward
	else
		--there is no reward structure they are arbitrary
		if challenge_ptr == 1 or challenge_ptr == 3 or challenge_ptr == 4 or challenge_ptr == 5 or challenge_ptr == 6 then
			reward = challenge_num * challenge_ptr
		elseif challenge_ptr == 2 then
			reward = challenge_num * (challenge_ptr + 1)
		elseif challenge_ptr == 7 or challenge_ptr == 8 then
			reward = challenge_num * highscore
		elseif challenge_ptr == 9 or challenge_ptr == 10 then
			reward = challenge_num * highscore * 2
		elseif challenge_ptr == 11 or challenge_ptr == 12 then
			reward = challenge_num * highscore * 3		
		end
	end
	challenge = challenges[challenge_ptr]
	save_to_memory_loc("challenge_ptr", challenge_ptr)
	save_to_memory_loc("challenge_status", challenge_status)
	save_to_memory_loc("reward", reward)
end

function init(self)
	math.randomseed(os.time())
	set_challenge()
end

-- the highscore the instant the player gets a new highscore
local highscore_snapshot
--the variables below are needed by the function below
local double_highscore
local triple_highscore
local check_challenge_status = function()
	if challenge_ptr == 1 then
		if score >= challenge_num then
			challenge_num = challenge_num + 5
			save_to_memory_loc("challenge_num"..challenge_ptr, challenge_num)
			challenge_status = true
			save_to_memory_loc("challenge_status", true)
			save_to_memory_loc("reward", final_reward)
		end
	elseif challenge_ptr == 2 then
		if score >= challenge_num then
			if brake_score == 0 or brake_score > challenge_num then
				challenge_num = challenge_num + 5
				save_to_memory_loc("challenge_num"..challenge_ptr, challenge_num)
				challenge_status = true
				save_to_memory_loc("challenge_status", true)
				save_to_memory_loc("reward", final_reward)
			end
		end
	elseif challenge_ptr == 3 then
		if challenge_num == max_color_streak then
			challenge_num = challenge_num + 1
			save_to_memory_loc("challenge_num"..challenge_ptr, challenge_num)
			challenge_status = true
			save_to_memory_loc("challenge_status", true)
			save_to_memory_loc("reward", final_reward)
		end
	elseif challenge_ptr == 4 then
		if challenge_num == max_color_streak and brake_score == 0 then
			challenge_num = challenge_num + 1
			save_to_memory_loc("challenge_num"..challenge_ptr, challenge_num)
			challenge_status = true
			save_to_memory_loc("challenge_status", true)
			save_to_memory_loc("reward", final_reward)
		end
	elseif challenge_ptr == 5 then
		if challenge_num == max_word_streak then
			challenge_num = challenge_num + 1
			save_to_memory_loc("challenge_num"..challenge_ptr, challenge_num)
			challenge_status = true
			save_to_memory_loc("challenge_status", true)
			save_to_memory_loc("reward", final_reward)
		end
	elseif challenge_ptr == 6 then
		if challenge_num == max_word_streak and brake_score == 0 then
			challenge_num = challenge_num + 1
			save_to_memory_loc("challenge_num"..challenge_ptr, challenge_num)
			challenge_status = true
			save_to_memory_loc("challenge_status", true)
			save_to_memory_loc("reward", final_reward)
		end
	elseif challenge_ptr == 7 then
		if highscore_snapshot ~= nil then
			challenge_status = true
			save_to_memory_loc("challenge_status", true)
			save_to_memory_loc("reward", final_reward)
		end
	elseif challenge_ptr == 8 then
		if highscore_snapshot ~= nil then
			if brake_score == 0 then
				challenge_status = true
				save_to_memory_loc("challenge_status", true)
				save_to_memory_loc("reward", final_reward)	
			end
		end
	elseif challenge_ptr == 9 then
		if highscore_snapshot ~= nil and score >= double_highscore then
			challenge_status = true
			save_to_memory_loc("challenge_status", true)
			save_to_memory_loc("reward", final_reward)
		end
	elseif challenge_ptr == 10 then
		if highscore_snapshot ~= nil and score >= double_highscore then
			if brake_score == 0 then
				challenge_status = true
				save_to_memory_loc("challenge_status", true)
				save_to_memory_loc("reward", final_reward)	
			end
		end
	elseif challenge_ptr == 11 then
		if highscore_snapshot ~= nil and score >= triple_highscore then
			challenge_status = true
			save_to_memory_loc("challenge_status", true)
			save_to_memory_loc("reward", final_reward)
		end
	elseif challenge_ptr == 12 then
		if highscore_snapshot ~= nil and score >= triple_highscore then
			if brake_score == 0 then
				challenge_status = true
				save_to_memory_loc("challenge_status", true)
				save_to_memory_loc("reward", final_reward)	
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	-- message ids
	local msg_set_chal = hash("set_chal")
	local msg_change_chal = hash("change_challenge")
	local msg_chal_req = hash("challenges_requested")
	local msg_check_chal = hash("check_challenge")
	local msg_num_of_clrs = hash("num_of_colors")
	local msg_give_reward = hash("give_reward")
	local msg_new_highscore = hash("new_highscore")
	local msg_menu_loaded = hash("menu_loaded")
	local msg_restart = hash("restart")
	local msg_shell = hash("shell")

	if message_id == msg_change_chal then
		ptr_holder = challenge_ptr
		save_to_memory_loc("challenge_ptr", nil) -- clear the memory location
		challenge_change = true
		set_challenge()
	elseif message_id == msg_give_reward then
		money = money + final_reward
		save_to_memory_loc("reward", nil)
		msg.post(sender, "chal_reward")
		msg.post(analyzer, "chal_passed")
	elseif message_id == msg_chal_req then
		msg.post(sender, "chal", {c = challenge, status = challenge_status, reward = reward})
	elseif message_id == msg_num_of_clrs then
		--num_of_colors = message.num_of_clrs
		if num_of_colors_picked ~= nil then -- this is to fix a problem with the pasuse and gameover scripts
			num_of_colors = num_of_colors_picked
		end
		if not challenge_status then -- if the challenge has not been passed
			final_reward = reward * num_of_colors
		end
		--clean up the highscore info from a concluded session
		highscore_snapshot = nil
		double_highscore = nil
		triple_highscore = nil
	elseif message_id == msg_check_chal then
		word_streaks = message.word
		color_streaks = message.color
		max_word_streak = 0
		max_color_streak = 0
		--get the max values in each table
		for k, v in ipairs(word_streaks) do
			if v > max_word_streak then
				max_word_streak = v
			end
		end
		for k, v in ipairs(color_streaks) do
			if v > max_color_streak then
				max_color_streak = v
			end
		end
		check_challenge_status()
	elseif message_id == msg_new_highscore then
		highscore_snapshot = highscore
		double_highscore = (highscore_snapshot - 1) * 2
		triple_highscore = (highscore_snapshot - 1) * 3
	elseif message_id == msg_menu_loaded then
		if challenge_status == true then
			reward = final_reward
		end
	elseif message_id == msg_restart then
		double_highscore = highscore * 2
		triple_highscore = highscore * 3
	elseif message_id == msg_shell then
		msg.post(sender, "challenge", {chal = challenge})
	end
end