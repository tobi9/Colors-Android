-- THIS SCRIPT DOES NOT MODIFY THE DATA IN ANY WAY (for the most part)
-- ITS JOB IS JUST RETRIEVE FROM AND SAVE TO MEMORY AND THE CLOUD
local enc = require("main.encryption")
local json = require("modules.json")
--local folder = "Trick Colors test"
local data = {}
sound_playing = false -- this is used to filter the music
has_been_reviewed = false -- this boolean tells us whether the game has been reviewed
local analyzer_data -- to be saved on the cloud.

--daily cash reward
local daily_reward_streak
local last_day -- the last day the game was played. It's the number of days elapsed since 0:00 jan 1970
local base_reward = 10

local get_day = function(total_seconds)
    local time_days = math.floor(total_seconds / 86400)
    local time_hours = math.floor(math.mod(total_seconds, 86400) / 3600)
    local time_minutes = math.floor(math.mod(total_seconds, 3600) / 60)
    local time_seconds = math.floor(math.mod(total_seconds, 60))
    if (time_hours < 10) then
        time_hours = "0" .. time_hours
    end
    if (time_minutes < 10) then
        time_minutes = "0" .. time_minutes
    end
    if (time_seconds < 10) then
        time_seconds = "0" .. time_seconds
    end
	return time_days
end

local is_first_time = false --  this variable indicates if the game is started for the first time since installation
local is_login_declined = false -- this is boolean that indicates whether or not the player declined gpgs login

local retrieve_data = function()
	local file = sys.get_save_file(folder, "tc2_data")
	local table = sys.load(file)
	if #table == 0 then
		money = 10000--100
		brakes = 3
		coins = 10
		lives = 3
		last_ad_time = 0
		highscore = 0
		daily_reward_streak = 0
		last_day = get_day(os.time())
		mode = "light"
		--gpgs instructions
		is_first_time = true
	else
		table = json.decode(table[1])
		money = tonumber(decode(table[1]))
		brakes = tonumber(decode(table[2]))
		coins = tonumber(decode(table[3]))
		lives = tonumber(decode(table[4]))
		last_ad_time = tonumber(decode(table[5]))
		highscore = tonumber(decode(table[6]))
		daily_reward_streak = tonumber(decode(table[7]))
		last_day = tonumber(decode(table[8]))
		mode = decode(table[9]) -- an exception
		is_login_declined = table[10]
		has_been_reviewed = table[11]
	end

	if gpgs then
		local is_opened = gpgs.snapshot_is_opened()
		if is_opened and is_first_time then
			local bytes, error_message = gpgs.snapshot_get_data()
			if #bytes > 0 then
				table = json.decode(bytes[1])
				money = tonumber(decode(table[1]))
				brakes = tonumber(decode(table[2]))
				coins = tonumber(decode(table[3]))
				lives = tonumber(decode(table[4]))
				last_ad_time = tonumber(decode(table[5]))
				highscore = tonumber(decode(table[6]))
				daily_reward_streak = tonumber(decode(table[7]))
				last_day = tonumber(decode(table[8]))
				mode = decode(table[9]) -- an exception
				is_login_declined = table[10]
				has_been_reviewed = table[11]
				--color info
				if is_first_time and #bytes[2] > 0 then
					color_info_table = json.decode(bytes[2])
				end
			end
		end
	end
end

local save_data = function()
	local file = sys.get_save_file(folder, "tc2_data")
	local values = {money, brakes, coins, lives, last_ad_time, highscore, daily_reward_streak, last_day, mode, is_login_declined, has_been_reviewed}
	for i, v in ipairs(values) do
		if i ~= 9 then
			table.insert(data, i,encode(tostring(v)))
		elseif i == 10 or i == 11 then
			table.insert(data, i, v) -- booleans cant be encoded
		else
			table.insert(data, i,encode(v)) -- since the value is a string already there is no need to use the tostring function
		end
	end
	local data_enc = json.encode(data)
	sys.save(file, {data_enc})
	if gpgs then
		local is_opened = gpgs.snapshot_is_opened()
		if is_opened then
			local cloud_data = {data_enc, color_info_table_enc, analyzer_data_enc}
			local success, error_message = gpgs.snapshot_set_data(cloud_data)
			if not success then
				--do something
			end
		end
	end
end

local function gpgs_callback(self, message_id, message)
    if message_id == gpgs.MSG_SIGN_IN or message_id == gpgs.MSG_SILENT_SIGN_IN then
		if message.status == gpgs.STATUS_SUCCESS then
			gpgs.snapshot_open("my_save", true, gpgs.RESOLUTION_POLICY_LAST_KNOWN_GOOD)
		else
			is_login_declined = true
		end
    elseif message_id == gpgs.MSG_SIGN_OUT then
		is_login_declined = true
	end
end

function init(self)--[[
	gpgs.set_callback(gpgs_callback)
	if is_first_time == true or is_login_declined == false then
		--silent login
		if gpgs then
			gpgs.silent_login()
		end
	end]]
	retrieve_data()
	--calculate the daily reward
	if get_day(os.time()) - last_day == 1 then
		daily_reward_streak = daily_reward_streak + 1
		money = money + (base_reward * daily_reward_streak)
	elseif get_day(os.time()) - last_day > 1 then
		daily_reward_streak = 1
		money = money + (base_reward * daily_reward_streak)
	end
	last_day = get_day(os.time()) -- record the date
end

function final(self)
	save_data()
	if gpgs then
		local is_opened = gpgs.snapshot_is_opened()
		if is_opened then
			gpgs.snapshot_commit_and_close({
				description = "GAME DATA"
			})
		end
	end
end

local msg_save_data = hash("save_data") 
local msg_manual_log_in = hash("manual_login")
local msg_analyzer_data = hash("analyzer_data")
function on_message(self, message_id, message, sender)
	if message_id == msg_save_data then
		save_data()
	elseif message_id == msg_manual_log_in then
		if gpgs then
			gpgs.login()
		end
	elseif message_id == msg_analyzer_data then
		analyzer_data = message.data --update the data
	end
end