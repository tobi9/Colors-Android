local json = require("modules.json")
analyzer = "main:/analyzer#analyzer"

--local folder = "tc2"
local suffix = "_an" -- the suffix is concatenated with the file names to avoid conficts 

local start_time -- The time the app is launched
local exit_time -- the time the app is exited

local time_totals = {} -- the time the player spends in the app each session is inserted into this table
local scores = {} -- the scores are stored in this table

local total_chals = 0 -- the total number of challenges set
local chals_passed = 0 -- the number of challenges passed

local total_spawns = 0
local total_brakes_used = 0

local colors_used = {} -- the color_strings of the colors the players has played with. These are not the unlocked colors

--The Color count records
local color_ledger = {
	{"red", 0},
	{"lime", 0},
	{"blue", 0}
}

--the player temperment stats
local total_gameovers = 0
local total_restarts = 0

function init(self)
	start_time = os.time()
	if (review and review.is_supported()) then
		review.request_review()
	end
	local check_memory_loc = function(str)
		local suffix = "_an" -- the suffix is concatenated with the file names to avoid conficts 
		local file = sys.get_save_file(folder, str..suffix)
		local cell = sys.load(file)
		if #cell > 0 then
			local value = json.decode(cell[1])
			return value
		else
			return {}
		end
	end
	--get the time totals from memory
	local table = check_memory_loc("time")
	if #table > 0 then
		time_totals = table
	end
	--get the scores from memomry
	table = check_memory_loc("score")
	if #table > 0 then
		scores = table
	end
	--get the challenge info from memory
	table = check_memory_loc("challenge")
	if #table > 0 then
		total_chals = table[1]
		chals_passed = table[2]
	end
	--get the total spawns from memory
	table = check_memory_loc("spawns")
	if #table > 0 then
		total_spawns = table[1]
	end
	--get the total spawns from memory
	table = check_memory_loc("brakes")
	if #table > 0 then
		total_brakes_used = table[1]
	end
	--get the colors used form memory
	table = check_memory_loc("colors used")
	if #table > 0 then
		colors_used = table
	end
	--get the color ledger from memory
	table = check_memory_loc("color_ledger")
	if #table > 0 then
		color_ledger = table
	end
	--get the temperment stats
	table = check_memory_loc("temp_stats")
	if #table > 0 then
		total_gameovers = table[1]
		total_restarts = table[2]
	end
end

function final(self)
	local save_to_memory_loc = function(str, tab)
		local suffix = "_an" -- the suffix is concatenated with the file names to avoid conficts 
		local file = sys.get_save_file(folder, str..suffix)
		sys.save(file, {json.encode(tab)})
	end

	--save the duration to memory
	exit_time = os.time()
	local time_spent = exit_time - start_time
	table.insert(time_totals, time_spent)
	save_to_memory_loc("time", time_totals)
	--save the challenge info to memory
	save_to_memory_loc("challenge", {total_chals, chals_passed})
	--save total spawns to memory
	save_to_memory_loc("spawns", {total_spawns})
	--save brakes to memory
	save_to_memory_loc("brakes", {total_brakes_used})
	--save colors used to memory
	save_to_memory_loc("colors used", colors_used)
	--save color ledger to memory
	save_to_memory_loc("color_ledger", color_ledger)
	--save the temp stats to memory
	save_to_memory_loc("temp_stats", {total_gameovers, total_restarts})
end

function on_message(self, message_id, message, sender)
	local msg_gameover = hash("gameover")
	local msg_chal_passed = hash("chal_passed")
	local msg_new_chal = hash("new_chal")
	local msg_new_spawn = hash("new_spawn")
	local msg_brake_used = hash("brake_used")
	local msg_colors = hash("colors")
	local msg_updt_ldgr = hash("update_ledger")	
	local msg_restart = hash("game_restarted")

	if message_id == msg_gameover then
		table.insert(scores, score)
		local file = sys.get_save_file(folder, "score"..suffix)
		sys.save(file, {json.encode(scores)})
		total_gameovers = total_gameovers + 1
	elseif message_id == msg_chal_passed then
		chals_passed = chals_passed + 1
	elseif message_id == msg_new_chal then
		total_chals = total_chals + 1
	elseif message_id == msg_new_spawn then
		total_spawns = total_spawns + 1
	elseif message_id == msg_brake_used then
		total_brakes_used = total_brakes_used + 1
	elseif message_id == msg_colors then
		local colors = message.colors
		for k, v in ipairs(colors) do
			local is_present = false
			local current_color = v
			for k, v in ipairs(colors_used) do
				if current_color == v then
					is_present = true
				end	
			end
			if not is_present then
				table.insert(colors_used, current_color)
			end
		end
		msg.post("#", "update_ledger", {colors = colors})
	elseif message_id == msg_updt_ldgr then
		local colors = message.colors
		for k, v in ipairs(colors) do
			local current_color = v
			local match_found = false
			local ledger_index  -- the position in the table where the match id found
			for k, v in ipairs(color_ledger) do
				if current_color == v[1] then
					ledger_index = k
					match_found = true
					break
				end
			end
			if match_found then
				color_ledger[ledger_index][2] = color_ledger[ledger_index][2] + 1
			else
				table.insert(color_ledger, {current_color, 1})
			end
		end
	elseif message_id == msg_restart then
		total_restarts = total_restarts + 1
	end
	--send this to be saved on the cloud
	local exit_time = os.time()
	local time_spent = exit_time - start_time--time spent so far
	table.insert(time_totals, time_spent)
	local data_table = {time_totals, scores, total_chals, chals_passed, total_spawns,
	total_brakes_used, colors_used, color_ledger}	
	msg.post("main:/main#data_handler", "analyzer_data", {data = json.encode(data_table)})
	table.remove(time_totals, #time_totals, time_spent) -- remove it as it was temporary
	--ask for review if the criteria have been met
	if (sys.NETWORK_DISCONNECTED ~= sys.get_connectivity()) and not has_been_reviewed then -- it always returns 1 which is a problem
		if chals_passed >= 3 and #scores >= 3 then
			if (review and review.is_supported()) then
				review.request_review()
			end		
			has_been_reviewed = true
		end
	end
end