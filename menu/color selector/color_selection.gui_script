local TouchFb = require("modules.animation")
local Colors = require("modules.colors")

local positions = {
	vmath.vector3(100, 850, 0), vmath.vector3(320, 850, 0),	vmath.vector3(540, 850, 0),
	vmath.vector3(100, 700, 0), vmath.vector3(320, 700, 0),	vmath.vector3(540, 700, 0),
	vmath.vector3(100, 550, 0), vmath.vector3(320, 550, 0),	vmath.vector3(540, 550, 0),
	vmath.vector3(100, 400, 0), vmath.vector3(320, 400, 0),	vmath.vector3(540, 400, 0),
	vmath.vector3(100, 250, 0), vmath.vector3(320, 250, 0),	vmath.vector3(540, 250, 0)
}

local page = 1
local box_nodes = {}
local text_nodes = {}
local container = {} -- this is the table that contains the unlocked colors
local disabled_box_nodes = {} -- this contains leftover unlocked colours that could'nt be spawned in the first page bcos of the limit 
local disabled_text_nodes = {}

local pos
local next_grid = function(num)
	if num > 15 then
		pos = positions[num - 15]
	else
		pos = positions[num]
	end
end

local spawn_boxes = function()
	for k, v in ipairs(unlocked_colors_table) do -- the reason for this is stated in the choose random colors function in the pick colors script
		table.insert(container, v)
	end
	for k, v in ipairs(container) do
		next_grid(k)
		local size = vmath.vector3(200, 100, 0)
		local box_scale = vmath.vector3(0.65, 1.3, 0)
		local text_scale = vmath.vector3(0.25, 0.25, 1)
		local box_node = gui.new_box_node(pos, size)
		local text_node = gui.new_text_node(pos, string.upper(v[1]))
		gui.set_color(box_node, v[3])
		gui.set_scale(box_node, box_scale)
		gui.set_scale(text_node, text_scale)
		table.insert(box_nodes, box_node)
		table.insert(text_nodes, text_node)
		if k > 15 then
			table.insert(disabled_box_nodes, box_node)
			table.insert(disabled_text_nodes, text_node)
			gui.set_enabled(box_node, false)
			gui.set_enabled(text_node, false)
		end
	end
end

--[[This function checks the the table container and compares it with the tray to know which colors 
have already been chosen by the player. Each data in the tray is compared with all the data in the container
and if there is a match, the text nodes attched to those colours will be set to the position of the data in the table
tray]]
local check_for_chosen_colors = function()
	for k ,v in ipairs(tray) do
		local value = v
		local tag = k -- the position
		for k, v in ipairs(container) do
			if value[1] == v[1] then
				gui.set_text(text_nodes[k], tag)
			end
		end
	end
end

local change_page = function()
	check_for_chosen_colors()
	if page == 1 then
		for k, v in ipairs(box_nodes) do
			if k <= 15 then
				gui.set_enabled(v, false)
			end
		end
		for k, v in ipairs(text_nodes) do
			if k <= 15 then
				gui.set_enabled(v, false)
			end
		end
		for k, v in ipairs(disabled_box_nodes) do
			gui.set_enabled(v, true)
		end
		for k, v in ipairs(disabled_text_nodes) do
			gui.set_enabled(v, true)
		end
		page = 2
	else
		for k, v in ipairs(disabled_box_nodes) do
			gui.set_enabled(v, false)
		end
		for k, v in ipairs(disabled_text_nodes) do
			gui.set_enabled(v, false)
		end
		for k, v in ipairs(box_nodes) do
			if k <= 15 then
				gui.set_enabled(v, true)
			end
		end
		for k, v in ipairs(text_nodes) do
			if k <= 15 then
				gui.set_enabled(v, true)
			end
		end
		page = 1
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	spawn_boxes()
	check_for_chosen_colors()
	gui.set_text(gui.get_node("title"), "SELECT "..num_of_colors_picked.." COLORS")
	--set the status
	if #tray == num_of_colors_picked then
		local node = gui.get_node("status")
		gui.set_text(node, "READY")
	end
	local Customizer = require("modules.customizer")
	-- node each node to its appropriate color
	local col_name = "palette" -- this is needed by the customizer to avoid conflicts in memory
	local box_nodes = {"title", "status", "_clear", "_ok"}
	for k, v in ipairs(box_nodes) do
		Customizer.set_node_color(v, col_name)
	end
end

function final(self)
	msg.post(".", "release_input_focus")
end

function on_message(self, message_id, message, sender)

end

local in_tray = false -- this is a boolean value that tells this function is the color picked has already been loaded
local check_for_conflict = function(clr)
	for i in ipairs(tray) do
		if tray[i][1] == clr[1] then
			in_tray =  true
		end
	end
end


local box_label -- this variable is the text node that corresponds to the box node picked by the player 
local color_picked
local substitutes = {}

local unload_color = function(pos)
	table.remove(tray, pos)
	table.insert(substitutes, 1, pos)
	pprint(substitutes)
	pprint(tray)
end

local load_color = function(clr, pos)
	check_for_conflict(clr)
	if #tray < num_of_colors_picked and in_tray == false then
		if pos == nil then
			table.insert(tray, clr)
			gui.set_text(box_label, #tray)
		else
			table.insert(tray, pos, clr)
			gui.set_text(box_label, string.upper(substitutes[1]))
			table.remove(substitutes, 1)
		end
	elseif in_tray == true then
		unload_color(tonumber(gui.get_text(box_label)))
		gui.set_text(box_label, string.upper(color_picked[1]))
	end
	in_tray = false -- this statement resets the in_tray boolean to false to enable the player to pick other colors
	--set the status to ready
	if #tray == num_of_colors_picked then
		local node = gui.get_node("status")
		gui.set_text(node, "READY")
	else
		local node = gui.get_node("status")
		gui.set_text(node, "NOT READY")
	end
end

local clear_selection = function()
	tray = {}
	for i in ipairs(text_nodes) do
		gui.set_text(text_nodes[i], string.upper(container[i][1]))
	end
end

local button_tapped
local handle_input = function()
	if button_tapped == 'ok' then
		msg.post(main, 'unload_color_selector')
	--[[elseif button_tapped == 'change_page' then
		change_page()
		button_tapped = nil]]
	elseif button_tapped == 'clear' then
		clear_selection()
		local node = gui.get_node("status")
		gui.set_text(node, "NOT READY")
	else
		if #substitutes == 0 then
			load_color(color_picked)
		else
			load_color(color_picked, substitutes[1])
		end
	end
	button_tapped = nil
end

local touch = hash("touch")
local back = hash('back')
function on_input(self, action_id, action)
	local ok = gui.get_node("_ok")
	--local change_page = gui.get_node("_change_page")
	local clear = gui.get_node("_clear")
	if action_id == touch and action.released then
		if gui.pick_node(ok, action.x, action.y) then
			button_tapped = 'ok'
			TouchFb.touch_feedback(ok, handle_input)
		--[[elseif gui.pick_node(change_page, action.x, action.y) then
			button_tapped = 'change_page'
			TouchFb.touch_feedback(change_page, handle_input)]]
		elseif gui.pick_node(clear, action.x, action.y) then
			button_tapped = 'clear'
			TouchFb.touch_feedback(clear, handle_input)
		else
			local matches = {} -- this table will contain the box nodes in the area of input
			local box
			for k, v in ipairs(box_nodes) do
				if gui.pick_node(v, action.x, action.y) then
					table.insert(matches, k)
				end
			end
			if #matches > 0 then
				color_picked = container[matches[page]]
				box_label = text_nodes[matches[page]]
				TouchFb.touch_feedback(box_nodes[matches[page]], handle_input)
			end
		end
	elseif action_id == back and action.released then
		msg.post(main, "click")
		button_tapped = "ok"
		handle_input()
	end
end