local TouchFb = require("modules.animation")

local box_nodes, text_nodes, container, page1, page2, page3, active_page = {}, {}, {}, {}, {}, {}

local check_for_chosen_colors = function()
	for k ,v in ipairs(tray) do
		local value = v
		local tag = k -- the position
		for k, v in ipairs(container) do
			if value[1] == v[1] then
				gui.set_text(text_nodes[k], tag)
			end
		end
	end
end

local show_options = function(page)
	local positions = {
		vmath.vector3(120, 900, 0), vmath.vector3(320, 900, 0), vmath.vector3(520, 900, 0),
		vmath.vector3(120, 700, 0),	vmath.vector3(320, 700, 0),	vmath.vector3(520, 700, 0),
		vmath.vector3(120, 500, 0),	vmath.vector3(320, 500, 0),	vmath.vector3(520, 500, 0),
		vmath.vector3(120, 300, 0),	vmath.vector3(320, 300, 0),	vmath.vector3(520, 300, 0)
	}
	local tab
	if page == 1 then
		tab = page1
		container = page1
	elseif page == 2 then
		tab = page2
		container = page2
	else
		tab = page3
		container = page3
	end

	for k, v in ipairs(tab) do
		local pos = positions[k]
		local size = vmath.vector3(200, 100, 0)
		local box_scale = vmath.vector3(0.7, 1.4, 0)
		local text_scale = vmath.vector3(0.25, 0.25, 1)
		local box_node = gui.new_box_node(pos, size)
		local text_node = gui.new_text_node(pos, string.upper(v[1]))
		gui.set_color(box_node, v[3])
		gui.set_scale(box_node, box_scale)
		gui.set_scale(text_node, text_scale)
		gui.set_layer(box_node, "box")
		gui.set_layer(text_node, "text")
		table.insert(box_nodes, box_node)
		table.insert(text_nodes, text_node)

		--to make the text visible
		if v[1] == "white" then
			gui.set_color(text_node, vmath.vector4(0, 0, 0, 1))
		end
	end
	active_page = page
	--check for already in the tray
	for k ,v in ipairs(tray) do
		local value = v
		local tag = k -- the position
		for k, v in ipairs(container) do
			if value[1] == v[1] then
				gui.set_text(text_nodes[k], tag)
			end
		end
	end
end

local remove_options = function()
	for k, v in ipairs(box_nodes) do
		gui.delete_node(v)
	end

	for k, v in ipairs(text_nodes) do
		gui.delete_node(v)
	end
	box_nodes = {}
	text_nodes = {}
end

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_text(gui.get_node("title"), "SELECT "..num_of_colors_picked.." COLORS")
	for k, v in ipairs(unlocked_colors_table) do
		if k <= 12 then
			table.insert(page1, v)
		elseif k > 12 and k <= 24 then
			table.insert(page2, v)
		elseif k > 24 and k <= 36 then
			table.insert(page3, v)
		end
	end

	show_options(1)
	--set the status
	if #tray == num_of_colors_picked then
		local node = gui.get_node("status")
		gui.set_text(node, "READY")
	end
	local Customizer = require("modules.customizer")
	-- node each node to its appropriate color
	local col_name = "palette" -- this is needed by the customizer to avoid conflicts in memory
	local box_nodes = {"title", "status", "_clear", "_ok", "_prev", "_next"}
	for k, v in ipairs(box_nodes) do
		Customizer.set_node_color(v, col_name)
	end
end

local sub_pos = {}-- the positions of the colours to be replaced. if not empty the replacing color takes the position of the last item in this table

function on_input(self, action_id, action)
	--touch id
	local touch = hash('touch')
	local back = hash('back')

	local button_tapped
	local input_handler = function()
		if button_tapped == "ok" then
			msg.post(main, 'unload_color_selector')
		elseif button_tapped == "next" then
			if active_page < 3 then
				remove_options()
				active_page = active_page + 1
				show_options(active_page)
			else
				msg.post("#wrong", "play_sound", {delay = 0, gain = 1})
			end
		elseif button_tapped == "prev" then
			if active_page > 1 then
				remove_options()
				active_page = active_page - 1
				show_options(active_page)
			else
				msg.post("#wrong", "play_sound", {delay = 0, gain = 1})
			end
		elseif button_tapped == 'clear' then
			tray = {}
			for i in ipairs(text_nodes) do
				gui.set_text(text_nodes[i], string.upper(container[i][1]))
			end
			local node = gui.get_node("status")
			gui.set_text(node, "NOT READY")	
		end
	end

	if action_id == touch and action.released then
		local ok = gui.get_node("_ok")
		local next = gui.get_node("_next")
		local prev = gui.get_node("_prev")
		local clear = gui.get_node("_clear")
		if gui.pick_node(ok, action.x, action.y) then
			button_tapped = "ok"
			TouchFb.touch_feedback(ok, input_handler)
		elseif gui.pick_node(next, action.x, action.y) then
			button_tapped = "next"
			TouchFb.touch_feedback(next, input_handler)		
		elseif gui.pick_node(prev, action.x, action.y) then
			button_tapped = "prev"
			TouchFb.touch_feedback(prev, input_handler)
		elseif gui.pick_node(clear, action.x, action.y) then
			button_tapped = 'clear'
			TouchFb.touch_feedback(clear, handle_input)
		else
			--tray was declared in the main script
			local in_tray = false -- this is a boolean value that tells this function is the color picked has already been loaded
			local tray_pos -- the position of the colour in the tray
			local check_for_conflict = function(clr)
				for i in ipairs(tray) do
					if tray[i][1] == clr[1] then
						in_tray =  true
						tray_pos = i
					end
				end
			end
			
			for k, v in ipairs(box_nodes) do
				if gui.pick_node(v, action.x, action.y) then
					TouchFb.touch_feedback(v, input_handler)
					if #tray < num_of_colors_picked then -- if the tray isn't full
						check_for_conflict(container[k])--check if the chosen color is in the tray
						if not in_tray then
							if #sub_pos == 0 then
								table.insert(tray, container[k])
								gui.set_text(text_nodes[k], #tray)
							else
								table.insert(tray, sub_pos[#sub_pos], container[k])
								gui.set_text(text_nodes[k], sub_pos[#sub_pos])
								table.remove(sub_pos, #sub_pos)
							end
						else
							gui.set_text(text_nodes[k], string.upper(container[k][1]))
							table.remove(tray, tray_pos)
							table.insert(sub_pos, tray_pos)
						end
					else
						check_for_conflict(container[k])
						if in_tray then
							gui.set_text(text_nodes[k], string.upper(container[k][1]))
							table.remove(tray, tray_pos)
							table.insert(sub_pos, tray_pos)
						end
					end
				end
			end
			if #tray == num_of_colors_picked then
				local node = gui.get_node("status")
				gui.set_text(node, "READY")
			else
				local node = gui.get_node("status")
				gui.set_text(node, "NOT READY")
			end		
		end
	elseif action_id == back and action.released then
		msg.post(main, "click")
		button_tapped = "ok"
		handle_input()
	end
end