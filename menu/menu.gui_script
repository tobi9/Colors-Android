local TouchFb = require("modules.animation")
--local Colors = require("modules.colors")
local Prompt = require("modules.prompt")

local button_tapped = nil
local old_data_retrieval = false --  this indiates whether or not the old data is requested so the exit prompt can be modified 

--These tables are needed to show the exit prompt
local exit_dialogue_nodes = {'exit_dialogue_box', 'exit_text', 'yes_exit', 'no_exit', 'yes','no'}	
local menu_nodes = {'title', 'start', "_start", "upgrades", "_upgrades", "sound", 
"_sound", "exit", "_exit", "_customize", "customize", "_board", "brakes", "lives", "coins",
"money", "challenge_txt", "challenge", "_chal_but", "chal_but", "challenge_reward", "dark", "_dark", "_log_in", "log_in", "best", "old_data",
"_old_data"}
local chal_prompt_nodes = {"chal_dialogue_box", "chal_prompt", "yes_chal", "yes1", "no_chal", "no1"}
local is_exit_prompt_active
local is_chal_prompt_active
local chal_status -- this is the status of the challenge. It is true if the challenge has been passed and false otherwise
chal_changes_allowed = nil -- the number of times the player can change the challenge it is a global variable

local req_challenge = function()
	msg.post("main:/main#challenges", "challenges_requested")
end

local function handle_input()
	if button_tapped == 'start' then
		msg.post(main, "start")
	elseif button_tapped == 'customize' then
		msg.post(main, "customizer")
	elseif button_tapped == 'upgrades' then
		msg.post(main, "upgrades")
	elseif button_tapped == 'sound' then
		msg.post(main, "sound")
	elseif button_tapped == 'dark' then
		if mode == "light" then
			msg.post("@render:", "clear_color", { color = vmath.vector4(0, 0, 0, 0) } )
			mode = "dark"
			local node = gui.get_node("dark")
			gui.set_text(node, "LIGHT\nMODE")
		else
			msg.post("@render:", "clear_color", { color = vmath.vector4(1, 1, 1, 0) } )
			mode = "light"
			local node = gui.get_node("dark")
			gui.set_text(node, "DARK\nMODE")
		end
	elseif button_tapped == 'log_in' then
		msg.post("main:/main#data_handler", "manual_login")
	elseif button_tapped == "old_data" then
		Prompt.prompt(menu_nodes, exit_dialogue_nodes)
		is_exit_prompt_active = true
		old_data_retrieval = true
		local node = gui.get_node("exit_text")
		gui.set_text(node, "RETRIEVE FORMER\nPROGRESS?")
		--msg.post("main:/main#data_handler", "old_data")
	elseif button_tapped == 'chal_but' then
		if chal_status then
			msg.post("#cash_sound", "play_sound", {delay = 0, gain = 1})
			chal_changes_allowed = 2
			--give reward
			msg.post("main:/main#challenges", "give_reward")
			msg.post("main:/main#challenges", "change_challenge")
			--stop the button animation
			local node = gui.get_node("_chal_but")
			gui.cancel_animation(node, "position.y")
			timer.delay(0.001, false, req_challenge)
		else
			Prompt.prompt(menu_nodes, chal_prompt_nodes)
			local node = gui.get_node("chal_prompt")
			local text
			if chal_changes_allowed > 0 then
				text = "CHANGE CHALLENGE\nCHANGES LEFT\n"..chal_changes_allowed.."\n ARE YOU SURE?"
			else
				text = "CHANGE CHALLENGE\nCOINS LEFT\n"..coins.."\nIT WILL COST 2 COINS ?"
			end
			gui.set_text(node, text)
			is_chal_prompt_active = true
		end
	elseif button_tapped == 'exit' then
		Prompt.prompt(menu_nodes, exit_dialogue_nodes)
		is_exit_prompt_active = true
	elseif button_tapped == 'yes' then
		if old_data_retrieval then
			msg.post("main:/main#data_handler", "old_data")
			old_data_retrieval = false
			Prompt.prompt(exit_dialogue_nodes, menu_nodes)
			is_exit_prompt_active = false	
			local node = gui.get_node("exit_text")
			gui.set_text(node, "WOULD YOU LIKE\nTO LEAVE?")	
		else
			msg.post("@system:", "exit", {code = 0})
		end
	elseif button_tapped == 'no' then
		Prompt.prompt(exit_dialogue_nodes, menu_nodes)
		is_exit_prompt_active = false
		local node = gui.get_node("exit_text")
		gui.set_text(node, "WOULD YOU LIKE\nTO LEAVE?")	
	elseif button_tapped == 'yes_chal' then
		if chal_changes_allowed > 0 then
			chal_changes_allowed = chal_changes_allowed - 1
			msg.post("main:/main#challenges", "change_challenge")
			timer.delay(0.001, false, req_challenge)
		elseif coins > 1 then
			msg.post("#coin_sound", "play_sound", {delay = 0, gain = 1})
			coins = coins - 2 --the player can change the challenge for two coins
			local c = gui.get_node("coins")
			gui.set_text(c, "COINS\n"..tostring(coins))		
			msg.post("main:/main#challenges", "change_challenge")
			timer.delay(0.001, false, req_challenge)
		end
		Prompt.prompt(chal_prompt_nodes, menu_nodes)
		is_chal_prompt_active = false
	elseif button_tapped == 'no_chal' then
		Prompt.prompt(chal_prompt_nodes, menu_nodes)
		is_chal_prompt_active = false	
	end
end

local col_name = "menu" -- this is needed by the customizer to avoid conflicts in memory

local update_info = function()
    local m = gui.get_node("money")
    gui.set_text(m, "$"..tostring(money))
    local b = gui.get_node("brakes")
    gui.set_text(b, "BRAKES\n"..tostring(brakes))
    local l = gui.get_node("lives")
    gui.set_text(l, "LIVES\n"..tostring(lives))
	local c = gui.get_node("coins")
	gui.set_text(c, "COINS\n"..tostring(coins))
	local best_id = gui.get_node('best')
	gui.set_text(best_id, "BEST\n"..tostring(highscore))
end

function init(self)
	req_challenge()
	msg.post(".", "acquire_input_focus")
	local Customizer = require("modules.customizer")
	-- node each node to its appropriate color
	local box_nodes = {'title', '_start', '_customize','_upgrades', '_sound', '_exit', '_board', "_dark", "_log_in", "_old_data"}
	for k, v in ipairs(box_nodes) do
		Customizer.set_node_color(v, --[[default_box_clr_info,]] col_name)
	end
	--set chal_but to _board's color
	gui.set_color(gui.get_node("chal_but"), gui.get_color(gui.get_node("_board")))
	
	--set the prompts to their app
	local prompt0 = {"board", "yes_text", "no_text"}
	local prompt1 = {"exit_dialogue_box", "yes", "no"}
	local prompt2 = {"chal_dialogue_box", "yes1", "no1"}
	for k, v in ipairs(prompt0) do
		gui.set_id(gui.get_node(prompt1[k]), v)
		Customizer.set_node_color(v, "prompt")
		gui.set_id(gui.get_node(v), prompt1[k])

		gui.set_id(gui.get_node(prompt2[k]), v)
		Customizer.set_node_color(v, "prompt")
		gui.set_id(gui.get_node(v), prompt2[k])
	end

	Prompt.prompt(exit_dialogue_nodes, menu_nodes)
	Prompt.prompt(chal_prompt_nodes, menu_nodes)
	is_exit_prompt_active = false
	is_chal_prompt_active = false
	--Render
	if mode == "light" then
		msg.post("@render:", "clear_color", { color = vmath.vector4(1, 1, 1, 0) } )
	else
		local node = gui.get_node("dark")
		gui.set_text(node, "LIGHT\nMODE")
	end
	-- retrive the value from memory or set it to the default
	local file = sys.get_save_file(folder, "chal_changes_allowed")
	local tab = sys.load(file)
	if #tab == 0 then
		chal_changes_allowed = 2
	else
		chal_changes_allowed = tab[1]
	end
	update_info()
	if user_logged_in then
		local node = gui.get_node("log_in")
		gui.set_text(node, "LOG\nOUT")
	else
		local node = gui.get_node("log_in")
		gui.set_text(node, "LOG\nIN")
	end
end

function on_message(self, message_id, message, sender)
	local msg_chal = hash("chal")
	local msg_chal_reward = hash("chal_reward")
	local msg_logged_out = hash("logged_out")
	local msg_logged_in = hash("logged_in")
	local msg_retrieved_data = hash("retrieved_data")

	if message_id == msg_chal then
		local node = gui.get_node("challenge")
		gui.set_text(node, message.c)
		chal_status = message.status
		node = gui.get_node("chal_but") -- I reused the node variable to accomodate the text on the challenge button
		if chal_status then
			msg.post("#bounty_success_sound", "play_sound", {delay = 0, gain = 1})
			gui.set_text(node, "TAP TO GET\nREWARD")
			node = gui.get_node("challenge_reward")
			gui.set_text(node, "YOUR REWARD IS \n$"..message.reward)
			--animate the button
			TouchFb.bounce_on_y_axis("_chal_but")
		else
			gui.set_text(node, "CHANGE\nCHALLENGE")
			node = gui.get_node("challenge_reward")
			gui.set_text(node, "REWARD\n$"..message.reward.." X COLORS USED")	
		end
	elseif message_id == msg_chal_reward then
		local m = gui.get_node("money")
		gui.set_text(m, "$"..tostring(money))
	elseif message_id == msg_logged_in then
		local node = gui.get_node("log_in")
		gui.set_text(node, "LOG\nOUT")
	elseif message_id == msg_logged_out then
		local node = gui.get_node("log_in")
		gui.set_text(node, "LOG\nIN")
	elseif message_id == msg_retrieved_data then
		update_info()
	end
end

function final(self)
	msg.post(".", "release_input_focus")
	local file = sys.get_save_file(folder, "chal_changes_allowed")
	local tab = {chal_changes_allowed}
	sys.save(file, tab)
end

-- action ids
local touch = hash('touch')
local back = hash('back')
function on_input(self, action_id, action)
	if action_id == touch and action.released then
		local start = gui.get_node("_start")
		local customizer = gui.get_node("_customize")
		local upgrades = gui.get_node("_upgrades")
		local sound = gui.get_node("_sound")
		local dark = gui.get_node("_dark")
		local exit = gui.get_node("_exit")
		local chal_but = gui.get_node("_chal_but")
		local yes = gui.get_node("yes_exit")
		local no = gui.get_node("no_exit")
		local yes_chal = gui.get_node("yes_chal")
		local no_chal = gui.get_node("no_chal")
		local log_in = gui.get_node("_log_in")
		local old_data = gui.get_node("_old_data")

		if is_exit_prompt_active == false and is_chal_prompt_active == false then
			if gui.pick_node(start, action.x, action.y) then
				button_tapped = 'start'
				TouchFb.touch_feedback(start, handle_input)
			elseif gui.pick_node(customizer, action.x, action.y) then
				button_tapped = 'customize'
				TouchFb.touch_feedback(customizer, handle_input)
			elseif gui.pick_node(upgrades, action.x, action.y) then
				button_tapped = 'upgrades'
				TouchFb.touch_feedback(upgrades, handle_input)
			elseif gui.pick_node(sound, action.x, action.y) then
				button_tapped = 'sound'
				TouchFb.touch_feedback(sound, handle_input)
			elseif gui.pick_node(dark, action.x, action.y) then
				button_tapped = 'dark'
				TouchFb.touch_feedback(dark, handle_input)
			elseif gui.pick_node(exit, action.x, action.y) then
				button_tapped = 'exit'
				TouchFb.touch_feedback(exit, handle_input)
			elseif gui.pick_node(chal_but, action.x, action.y) then
				button_tapped = 'chal_but'
				TouchFb.touch_feedback(chal_but, handle_input)
			elseif gui.pick_node(log_in, action.x, action.y) then
				button_tapped = 'log_in'
				TouchFb.touch_feedback(log_in, handle_input)
			elseif gui.pick_node(old_data, action.x, action.y) then
				button_tapped = "old_data"
				TouchFb.touch_feedback(old_data, handle_input)
			end
		elseif is_exit_prompt_active then
			if gui.pick_node(yes, action.x, action.y) then
				button_tapped = 'yes'
				TouchFb.touch_feedback(yes, handle_input)
			elseif gui.pick_node(no, action.x, action.y) then
				button_tapped = 'no'
				TouchFb.touch_feedback(no,handle_input)
			end
		elseif is_chal_prompt_active then
			if gui.pick_node(yes_chal, action.x, action.y) then
				button_tapped = 'yes_chal'
				TouchFb.touch_feedback(yes_chal, handle_input)
			elseif gui.pick_node(no_chal, action.x, action.y) then
				button_tapped = 'no_chal'
				TouchFb.touch_feedback(no_chal , handle_input)
			end
		end
	elseif action_id == back and action.released then
		msg.post(main, "click")
		if is_exit_prompt_active == false and is_chal_prompt_active == false then
			button_tapped = 'exit'
			handle_input()
		elseif is_exit_prompt_active then
			Prompt.prompt(exit_dialogue_nodes, menu_nodes)
			is_exit_prompt_active = false
		else
			Prompt.prompt(chal_prompt_nodes, menu_nodes)
			is_chal_prompt_active = false
		end
	end
end