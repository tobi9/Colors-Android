local TouchFb = require("modules.animation")
local Colors = require("modules.colors")

local options = { '_1', '_2', '_3', '_4', '_5', '_6'}
local enabled_boxes = {}

local default_box_color
local show_boxes = function(int)
	default_box_color = gui.get_color(gui.get_node(options[1]))
	for k, v in ipairs(options) do
		if k  <= int then
			local node = gui.get_node(v)
			local text = gui.get_node("text"..v)
			gui.set_enabled(node, true)
			gui.set_enabled(text, true)
			table.insert(enabled_boxes, node)
		end
	end
	--	This block of code below sets the y positions of the boxes displayed to 650 and scales them up for aesthetic purposes
	if num_of_colors_picked == 3 then
		for k, v in ipairs(options) do
			if k <= 3 then
				local node = gui.get_node(v)
				local text = gui.get_node("text"..v)
				local pos = gui.get_position(node)
				pos.y  = 650 
				gui.set_position(node, pos)
				gui.set_position(text, pos)
				gui.set_scale(node, vmath.vector4(0.9, 1.8, 1, 1))
			end
		end
	elseif num_of_colors_picked == 4 then
		local node = gui.get_node(options[4])
		local text = gui.get_node("text"..options[4])
		local pos = gui.get_position(node)
		pos.x = 320
		gui.set_position(node, pos)
		gui.set_position(text, pos)		
	elseif num_of_colors_picked == 5 then
		local node = gui.get_node(options[4])
		local text = gui.get_node("text"..options[4])
		local pos = gui.get_position(node)
		pos.x  = 240
		gui.set_position(node, pos)
		gui.set_position(text, pos)		
		node = gui.get_node(options[5])
		text = gui.get_node("text"..options[5])
		pos = gui.get_position(node)
		pos.x = 440 
		gui.set_position(node, pos)
		gui.set_position(text, pos)		
	end
end

local set_box_colors = function()
	for k, v in ipairs(tray) do
		gui.set_color(enabled_boxes[k], v[3])
		local text = gui.get_node("text"..options[k])
		gui.set_text(text, string.upper(v[1]))
		TouchFb.bounce_on_y_axis(options[k])

		--to make the text visible
		if v[1] == "white" then
			gui.set_color(text, vmath.vector4(0, 0, 0, 1))
		end
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_text(gui.get_node("title"), "CHOOSE "..num_of_colors_picked.." DIFFERENT\nCOLORS")
	for k, v in ipairs(options) do
		local node = gui.get_node(v)
		local text = gui.get_node("text"..v)
		gui.set_enabled(node, false)
		gui.set_enabled(text, false)
	end
	show_boxes(num_of_colors_picked)
	set_box_colors()
	local Customizer = require("modules.customizer")
	-- node each node to its appropriate color
	local col_name = "pick_colors" -- this is needed by the customizer to avoid conflicts in memory
	local box_nodes =  {"title", "_pick", "_play", "_clear", "_random", "_menu"}
	for k, v in ipairs(box_nodes) do
		Customizer.set_node_color(v, col_name)
	end
	
end

function final(self)
	msg.post(".", "release_input_focus")
end

function on_message(self, message_id, message, sender)

end

local clear_tray  = function()
	tray = {}
	for k, v in ipairs(enabled_boxes) do
		gui.set_color(v, default_box_color)
		local text = gui.get_node("text"..options[k])
		gui.set_text(text, " ")
		gui.cancel_animation(gui.get_node(options[k]), "position")
	end
end

local multiplier = 1
local choose_random_colors = function()
	tray = {}
	local container = {}
	--I iterated over the unlocked colors table because assigning the unclocked color table directly
	--to the container causes any operation performed on the container to affect the unlocked colors table(it is passed by
	--reference not by value)
	for k, v in ipairs(unlocked_colors_table) do
		table.insert(container, v)
	end
	math.randomseed(os.time() * multiplier)
	repeat
		local index = math.random(#container)
		table.insert(tray, container[index])
		table.remove(container, index) --prevents repitition of colours
		multiplier = multiplier + 1
	until(#tray == num_of_colors_picked)
	set_box_colors()
end

local button_tapped
local handle_input = function()
	if button_tapped == 'menu' then
		tray = {}
		msg.post(main, "unload_pick_colors")
	elseif button_tapped == 'pick' then
		msg.post(main, "load_color_selector")
	elseif button_tapped == 'clear' then
		clear_tray()
	elseif button_tapped == "random" then
		choose_random_colors()
	elseif button_tapped == "play" then
		if num_of_colors_picked == #tray then
			msg.post(main, "load_level")
			NumOfColorsPicked = num_of_colors_picked -- this variable was declared in the main script
		end
	else
		msg.post(main, "load_color_selector")
	end
end

local touch = hash("touch")
local back = hash('back')
function on_input(self, action_id, action)
	local input_table = {'pick', 'clear', 'random', 'play', 'menu'}
	if action_id == touch and action.released then
		for k, v in ipairs(options) do
			local node = gui.get_node(v)
			if gui.pick_node(node, action.x, action.y) == true then
				button_tapped = v
				TouchFb.touch_feedback(node, handle_input)
			end
		end
		for k, v in ipairs(input_table) do
			local node = gui.get_node("_"..v)
			if gui.pick_node(node, action.x, action.y) == true then
				button_tapped = v
				TouchFb.touch_feedback(node, handle_input)				
			end
		end
	elseif action_id == back and action.released then
		msg.post(main, "click")
		button_tapped = "menu"
		handle_input()
	end
end